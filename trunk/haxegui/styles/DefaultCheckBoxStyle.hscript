this.graphics.clear();

this.filters = [];
if( this.disabled )
{
	var fmt = DefaultStyle.getTextFormat();
	fmt.color = this.color - 0x202020;
	this.label.tf.setTextFormat(fmt);

	var shadow = new flash.filters.DropShadowFilter(
			4, 45, DefaultStyle.DROPSHADOW,
			0.2, 4, 4, 0.65,
			flash.filters.BitmapFilterQuality.HIGH,
			true, false, false );
	this.filters = [shadow];
}


this.graphics.lineStyle (1,
	Math.max(0, Math.min(0xFFFFFF, this.color - 0x282828)),
	2, true, 
	flash.display.LineScaleMode.NONE,
	flash.display.CapsStyle.ROUND,
	flash.display.JointStyle.ROUND
	);
if(this.checked)
{
	var colors = [ this.color | 0x323232, this.color - 0x141414 ];
	var alphas = [ 100, 0 ];
	var ratios = [ 0, 0xFF ];
	var matrix = new flash.geom.Matrix();
	matrix.createGradientBox(20, 20, Math.PI/2, 0, 0);
	this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
	this.graphics.drawRoundRect (0, 0, 20, this.box.height, 8, 8 );

	this.graphics.lineStyle (4, this.color - 0x282828);
	this.graphics.moveTo (6, 6);
	this.graphics.lineTo (14, 14);
	this.graphics.moveTo (14, 6);
	this.graphics.lineTo (6, 14);

}
else
{
	var colors = [ this.color - 0x141414, this.color | 0x323232 ];
	var alphas = [ 100, 0 ];
	var ratios = [ 0, 0xFF ];
	var matrix = new flash.geom.Matrix();
	matrix.createGradientBox(20, 20, Math.PI/2, 0, 0);
	this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );

	this.graphics.drawRoundRect (0, 0, 20, this.box.height, 8, 8 );
}

this.graphics.endFill();
