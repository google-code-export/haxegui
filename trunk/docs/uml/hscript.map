<map id="uml" name="uml">
<area shape="rect" href="../types/hscript/Parser.html" title="{Parser|+ line : Int\l+ opChars : String\l+ identChars : String\l+ opPriority : Array\&lt;String\&gt;\l+ unopsPrefix : Array\&lt;String\&gt;\l+ unopsSuffix : Array\&lt;String\&gt;\l&#45; char : Null\l&#45; ops : Array\&lt;Bool\&gt;\l&#45; idents : Array\&lt;Bool\&gt;\l&#45; tokens : haxe.FastList_hscript_Token\l|+ parseString (s : String) : hscript.Expr\l+ parse (s : haxe.io.Input) : hscript.Expr\l&#45; unexpected (tk : Token) : null\l&#45; isBlock (e : Expr) : Bool\l&#45; parseFullExpr (s : haxe.io.Input) : hscript.Expr\l&#45; parseExpr (s : haxe.io.Input) : hscript.Expr\l&#45; priority (op : String) : Int\l&#45; makeUnop (op : String, e : Expr) : hscript.Expr\l&#45; makeBinop (op : String, e1 : Expr, e : Expr) : hscript.Expr\l&#45; parseStructure (s : haxe.io.Input, id : String) : hscript.Expr\l&#45; parseExprNext (s : haxe.io.Input, e1 : Expr) : hscript.Expr\l&#45; parseExprList (s : haxe.io.Input, etk : Null) : Array\l&#45; readChar (s : haxe.io.Input) : Int\l&#45; readString (s : haxe.io.Input, until : Int) : String\l&#45; token (s : haxe.io.Input) : Null\l&#45; tokenComment (s : haxe.io.Input, op : String, char : Int) : Null\l&#45; constString (c : Const) : String\l&#45; tokenString (t : Token) : String\l+ new () : Void\l}" alt="" coords="427,5,805,437"/>
<area shape="rect" href="../types/hscript/Interp.html" title="{Interp|+ variables : Hash\&lt;Dynamic\&gt;\l&#45; locals : Hash\&lt;Anonymous\&gt;\l&#45; binops : Hash\&lt;hscript.Expr\&gt;\l&#45; declared : Array\&lt;Anonymous\&gt;\l|&#45; initOps () : Void\l&#45; assign (e1 : Expr, e2 : Expr) : null\l&#45; assignOp (op : String, fop () : null) : Void\l&#45; evalAssignOp (op : String, fop () : null, e1 : Expr, e2 : Expr) : null\l&#45; increment (e : Expr, prefix : Bool, delta : Int) : null\l+ execute (expr : Expr) : null\l&#45; exprReturn (e : Expr) : null\l&#45; duplicate (h : Hash\&lt;duplicate.T\&gt;) : Hash\l&#45; restore (old : Int) : Void\l+ expr (e : Expr) : null\l&#45; whileLoop (econd : Expr, e : Expr) : Void\l&#45; makeIterator (v : Dynamic) : Iterator\l&#45; forLoop (n : String, it : Expr, e : Expr) : Void\l&#45; get (o : Dynamic, f : String) : null\l&#45; set (o : Dynamic, f : String, v : Dynamic) : null\l&#45; call (o : Dynamic, f : Dynamic, args : Array\&lt;Dynamic\&gt;) : null\l&#45; cnew (cl : String, args : Array\&lt;Dynamic\&gt;) : null\l+ new () : Void\l}" alt="" coords="5,52,403,391"/>
</map>
