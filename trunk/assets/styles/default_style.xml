<?xml version="1.0" encoding="iso-8859-1"?>
<haxegui:Style name="default">

	<haxegui:MenuBarItem>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				this.graphics.clear();
				var colors = [ this.color - 0x141414, this.color | 0x323232 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(40, 24, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 40, 24);
				this.graphics.endFill();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				var colors = [ this.color - 0x141414, this.color | 0x323232 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(40, 24, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 40, 24);
				this.graphics.endFill();
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				this.graphics.clear();
				
				var colors = [ this.color, 0xFFFFFF ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(40, 24, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 40, 24);
				this.graphics.endFill();
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				this.graphics.clear();
				
				var colors = [ this.color, Math.min(0xFFFFFF, this.color - 0x282828) ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(40, 24, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 40, 24);
				this.graphics.endFill();
			]]>
			</script>
		</events>
	</haxegui:MenuBarItem>

	<haxegui:Window>
		<events>
			<script type="text/hscript" action="focusIn">
			<![CDATA[
				WindowManager.toFront(this);
			]]>
			</script>
			<script type="text/hscript" action="losingFocus">
			<![CDATA[
				if(this.isModal()) return false;
				return true;
			]]>
			</script>
		</events>
	</haxegui:Window>

	<haxegui:windowClasses:WindowFrame>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.parent.color - 0x282828)),
							 2, true, flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginFill (this.parent.color, 0.5);
				this.graphics.drawRoundRect (0, 0, this.parent.box.width + 10, this.parent.box.height + 10, 8, 8);
				this.graphics.drawRect (10, 20, this.parent.box.width - 10, this.parent.box.height - 20);
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:windowClasses:WindowFrame>

	<haxegui:windowClasses:CloseButton>
		<events>
			<script type="text/hscript" action="mouseClick">
			<![CDATA[
				this.parent.parent.destroy();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 4);
				this.graphics.lineTo (8, 8);
				this.graphics.moveTo (8, 4);
				this.graphics.lineTo (4, 8);
			]]>
			</script>
		</events>
	</haxegui:windowClasses:CloseButton>

	<haxegui:windowClasses:TitleBar>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				var grad = flash.display.GradientType.LINEAR;
				var colors = [ this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 0 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(this.parent.box.width, 32, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( grad, colors, alphas, ratios, matrix );
				this.graphics.drawRoundRectComplex (0, 0, this.parent.box.width + 10, 32, 4, 4, 0, 0);
				this.graphics.drawRect (10, 20, this.parent.box.width - 10, 12);
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:windowClasses:TitleBar>

	<haxegui:windowClasses:MaximizeButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 6);
				this.graphics.lineTo (8, 6);
				this.graphics.moveTo (6, 4);
				this.graphics.lineTo (6, 8);
			]]>
			</script>
		</events>
	</haxegui:windowClasses:MaximizeButton>

	<haxegui:windowClasses:MinimizeButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 6);
				this.graphics.lineTo (8, 6);
			]]>
			</script>
		</events>
	</haxegui:windowClasses:MinimizeButton>

	<haxegui:Container>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				this.graphics.beginFill(this.color);
				this.graphics.drawRect(0, 0, this.box.width, this.box.height );
				this.graphics.endFill();
				//var shadow:DropShadowFilter = new DropShadowFilter (4, 45, DefaultStyle.DROPSHADOW, 0.5, 4, 4,0.75,BitmapFilterQuality.HIGH,true,false,false);
				//this.filters = [shadow];
			]]>
			</script>
		</events>
	</haxegui:Container>

	<haxegui:PopupMenuItem>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				var colors = [ this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(this.box.width, this.box.height, Math.PI/2, 0, 0);
				this.graphics.lineStyle(1);
				this.graphics.lineGradientStyle (flash.display.GradientType.LINEAR, [ this.color, this.color - 0x202020 ], alphas, ratios, matrix);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRoundRect (0, 0, this.box.width, this.box.height, 8, 8 );
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:PopupMenuItem>

	<haxegui:ToolBar>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				
				var colors = [ this.color - 0x141414, this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 100, 100 ];
				var ratios = [ 0, 0x80, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(this.box.width, this.box.height, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				
				this.graphics.drawRect (0, 0, this.box.width, this.box.height);
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:ToolBar>

	<haxegui:MenuBar>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				var colors = [ this.color - 0x141414, this.color | 0x323232 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(box.width, 24, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, this.box.width, this.box.height);
				this.graphics.endFill();
			]]>
			</script>
		</events>
	</haxegui:MenuBar>

	<haxegui:TabNavigator>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				this.graphics.lineStyle(1, this.color - 0x141414 );
				this.graphics.beginFill( this.color );
				this.graphics.drawRect( 0, 24, this.box.width, this.box.height );
				this.graphics.endFill();
			]]>
			</script>
		</events>
	</haxegui:TabNavigator>

	<haxegui:controls:StepperDownButton>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				CursorManager.setCursor(Cursor.ARROW);
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="interval">
			<![CDATA[
				this.parent.value -= this.parent.step;
			]]>
			</script>
			<script type="text/hscript" action="mouseUp">
			<![CDATA[
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				this.graphics.beginFill(this.color);
				this.graphics.drawRoundRectComplex(0, 0, 10, 10, 0, 0, 0, 4);
				this.graphics.endFill();
				this.moveTo( this.parent.box.width - 10, 9 );
				var shadow = new flash.filters.DropShadowFilter(
					2, 45, DefaultStyle.DROPSHADOW,
					0.5, 4, 4, 0.5,
					flash.filters.BitmapFilterQuality.HIGH,
					false, false, false );
				this.filters = [shadow];
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				if(disabled) return;
				CursorManager.setCursor(Cursor.HAND);
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				if(!this.disabled && this.autoRepeat) {
					this.parent.value -= this.parent.step;
					this.startIntervalDelayed(this.repeatsPerSecond, this.repeatWaitTime);
				}
			]]>
			</script>
		</events>
	</haxegui:controls:StepperDownButton>

	<haxegui:controls:AbstractButton>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				if(this.disabled) return;
				this.updateColorTween( new feffects.Tween(event.buttonDown ? -50 : 50, 0, 350, feffects.easing.Linear.easeOut ) );
				CursorManager.setCursor(Cursor.ARROW);
			]]>
			</script>
			<script type="text/hscript" action="mouseUp">
			<![CDATA[
				if(this.disabled) return;
				if(this.hitTestObject( CursorManager.getInstance()._mc )) {
					this.updateColorTween( new feffects.Tween(-50, 50, 150, feffects.easing.Linear.easeNone) );
					CursorManager.setCursor(this.cursorOver);
				}
				else {
					this.updateColorTween( new feffects.Tween(-50, 0, 120, feffects.easing.Linear.easeNone) );
				}
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				if(this.disabled) return;
				this.updateColorTween( new feffects.Tween(0, 50, 275, feffects.easing.Expo.easeOut ) );
					CursorManager.setCursor(this.cursorOver);
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				if(this.disabled) return;
				this.updateColorTween( new feffects.Tween(50, -50, 350, feffects.easing.Linear.easeOut) );
				CursorManager.setCursor(this.cursorPress);
			]]>
			</script>
		</events>
	</haxegui:controls:AbstractButton>

	<haxegui:controls:Input>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, DefaultStyle.BACKGROUND - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
				
				this.graphics.beginFill ( (this.disabled ? DefaultStyle.BACKGROUND : DefaultStyle.INPUT_BACK) );
				this.graphics.drawRoundRect(0, 0, this.box.width, this.box.height, 8, 8 );
				this.graphics.endFill ();
				
				this.tf.setTextFormat( 	DefaultStyle.getTextFormat(8,
										this.disabled ?
										DefaultStyle.BACKGROUND - 0x202020 :
										DefaultStyle.INPUT_TEXT,
										flash.text.TextFormatAlign.LEFT)
										);
			]]>
			</script>
		</events>
	</haxegui:controls:Input>

	<haxegui:controls:ComboBox>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				if(this.color==0 || Math.isNaN(this.color))
					this.color = DefaultStyle.BACKGROUND;
				
				if(this.input != null)
					{
					this.input.redraw();
					//~ this.input.tf.setTextFormat( DefaultStyle.getTextFormat( 8, this.disabled ? DefaultStyle.BACKGROUND - 0x141414 : DefaultStyle.INPUT_TEXT ));
					}
				
				if(this.background!=null)
					this.background.redraw();
				
				this.dropButton.redraw();
				this.setChildIndex(this.dropButton, this.numChildren - 1);
			]]>
			</script>
		</events>
	</haxegui:controls:ComboBox>

	<haxegui:controls:CheckBox>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				CursorManager.setCursor(Cursor.ARROW);
			]]>
			</script>
			<script type="text/hscript" action="mouseClick">
			<![CDATA[
				if(this.disabled) return;
				this.checked = !this.checked;
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				this.filters = [];
				var fmt = DefaultStyle.getTextFormat();
				
				if( this.disabled )
				{
					fmt.color = this.color - 0x202020;
				
					var shadow = new flash.filters.DropShadowFilter(
							4, 45, DefaultStyle.DROPSHADOW,
							0.2, 4, 4, 0.65,
							flash.filters.BitmapFilterQuality.HIGH,
							true, false, false );
					this.filters = [shadow];
				}
				
				this.label.tf.setTextFormat(fmt);
				
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, this.color - 0x282828)),
					2, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
				
				
				if(this.checked)
				{
					var colors = [ this.color | 0x323232, this.color - 0x141414 ];
					var alphas = [ 100, 0 ];
					var ratios = [ 0, 0xFF ];
					var matrix = new flash.geom.Matrix();
					matrix.createGradientBox(20, 20, Math.PI/2, 0, 0);
					this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
					this.graphics.drawRoundRect (0, 0, 20, this.box.height, 8, 8 );
				
					this.graphics.lineStyle (4, this.color - 0x282828);
					this.graphics.moveTo (6, 6);
					this.graphics.lineTo (14, 14);
					this.graphics.moveTo (14, 6);
					this.graphics.lineTo (6, 14);
				
				}
				else
				{
					var colors = [ this.color - 0x141414, this.color | 0x323232 ];
					var alphas = [ 100, 0 ];
					var ratios = [ 0, 0xFF ];
					var matrix = new flash.geom.Matrix();
					matrix.createGradientBox(20, 20, Math.PI/2, 0, 0);
					this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				
					this.graphics.drawRoundRect (0, 0, 20, this.box.height, 8, 8 );
				}
				
				this.graphics.endFill();
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				if(!this.disabled)
					CursorManager.setCursor(Cursor.HAND);
			]]>
			</script>
		</events>
	</haxegui:controls:CheckBox>

	<haxegui:controls:ScrollBarDownButton>
		<events>
			<script type="text/hscript" action="interval">
			<![CDATA[
				/*trace(parent.handle.y);*/
				
				var y = parent.handle.y + 50;
				if( y > parent.frame.height - parent.handle.height + 20)
					y = parent.frame.height - parent.handle.height + 20;
				
				
				if(parent.handleMotionTween!=null)
					parent.handleMotionTween.stop();
				
				
				parent.handleMotionTween = new feffects.Tween( parent.handle.y, y, 1500, parent.handle, "y", feffects.easing.Expo.easeOut );
				parent.handleMotionTween.setTweenHandlers( function ( e ) { parent.adjust(e); } );
				parent.handleMotionTween.start();
			]]>
			</script>
			<script type="text/hscript" action="mouseUp">
			<![CDATA[
				if(this.disabled) return;
				if(this.hitTestObject( CursorManager.getInstance()._mc )) {
					this.updateColorTween( new feffects.Tween(-50, 50, 150, feffects.easing.Linear.easeNone) );
					CursorManager.setCursor(this.cursorOver);
				}
				else {
					this.updateColorTween( new feffects.Tween(-50, 0, 120, feffects.easing.Linear.easeNone) );
				}
				
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				var colors = [ this.color - 0x141414,  this.color | 0x323232 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(20, 20, Math.PI, 0, 0);
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, this.color - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 20, 20 );
				this.graphics.endFill ();
				
				var colors = [ this.color - 0x141414,  this.color - 0x333333 ];
				matrix.createGradientBox(10, 110, Math.PI, 5, 5);
				this.graphics.lineStyle (1, this.color - 0x333333 );
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, [0, 0x66], matrix );
				this.graphics.moveTo(7.5,7.5);
				this.graphics.lineTo(10, 12.5);
				this.graphics.lineTo(12.5, 7.5);
				this.graphics.endFill ();
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				this.updateColorTween( new feffects.Tween(50, -50, 350, feffects.easing.Linear.easeOut) );
				CursorManager.setCursor(this.cursorPress);
				
				this.startInterval(10);
			]]>
			</script>
		</events>
	</haxegui:controls:ScrollBarDownButton>

	<haxegui:controls:Button>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				
				function toHex(value)
				{
				    return ( value << 16 | value << 8 | value );
				}
				
				var highlight = Math.max(0, Math.min(0xFFFFFF, this.color | toHex(50) ));
				var mid = Math.max(0, Math.min(0xFFFFFF, this.color - toHex(10) ));
				
				var colors = this.disabled ?
				  [this.color, highlight, mid, this.color] :
				  [this.color, highlight, mid, this.color];
				var alphas =[100, 100, 100, 100];
				var ratios =[0, 0x70, 0xD0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				
				matrix.createGradientBox (this.box.width, this.box.height, Math.PI / 2, 0, 0);
				
				
				this.graphics.lineStyle (1, this.color - toHex(20), 1, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				/*
				this.graphics.lineGradientStyle (flash.display.GradientType.LINEAR,
								 [this.color - toHex(20), this.color - toHex(40)], alphas,
								 ratios, matrix);
				*/
				this.graphics.beginGradientFill (flash.display.GradientType.LINEAR, colors,
								 alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, this.box.width, this.box.height, 8, 8);
				this.graphics.endFill ();
				
				var fmt =
				  DefaultStyle.getTextFormat (8, DefaultStyle.LABEL_TEXT,
							      flash.text.TextFormatAlign.LEFT);
				if (this.disabled)
				  fmt.color = this.color - 0x202020;
				this.label.tf.setTextFormat (fmt);
				
				if (this.filters.length == 0)
				  {
				    var shadow =
				      new flash.filters.DropShadowFilter (this.disabled ? 2 : 4, 45,
									  DefaultStyle.DROPSHADOW,
									  this.disabled ? 0.2 : 0.5,
									  4, 4, 0.5,
									  flash.filters.BitmapFilterQuality.
									  HIGH,
									  false, false, false);
				    this.filters =[shadow];
				  }
				
				if (this.label != null)
				  {
				    this.label.moveTo (Math.floor (.5 * (this.box.width - this.label.width)),
						       Math.floor (.5 *
								   (this.box.height - this.label.height)));
				  }
			]]>
			</script>
		</events>
	</haxegui:controls:Button>

	<haxegui:controls:Expander>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				CursorManager.setCursor(Cursor.ARROW);
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				if(this.expanded)
				{
				
					this.graphics.lineStyle(1);
					this.graphics.beginFill( this.color );
					this.graphics.moveTo(0,0);
					this.graphics.lineTo(15, 0);
					this.graphics.lineTo(7.5, 15);
					this.graphics.endFill();
				
				}
				else
				{
					this.graphics.lineStyle(1);
					this.graphics.beginFill( this.color );
					this.graphics.moveTo(0, 15);
					this.graphics.lineTo(15, 7.5);
					this.graphics.lineTo(0,0);
					this.graphics.endFill();
				}
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				if(!this.disabled) {
					CursorManager.setCursor(Cursor.HAND);
				}
			]]>
			</script>
		</events>
	</haxegui:controls:Expander>

	<haxegui:controls:ScrollBarHandle>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				var colors = [ this.color - 0x141414, this.color | 0x323232 ];
				/*if(horizontal)
					colors = [ color | 0x323232, color - 0x141414 ];*/
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(20, h, Math.PI, 0, 0);
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, this.color - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 20, h );
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:controls:ScrollBarHandle>

	<haxegui:controls:ComboBoxBackground>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				var h = this.parent.box.height;
				var w = this.parent.box.width;
				
				var colors = [ this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				
				matrix.createGradientBox(w, h*2, Math.PI/2, 0, 0);
				
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, DefaultStyle.BACKGROUND - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
				
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, [0, 0x66], matrix );
				this.graphics.drawRoundRect(0, 0, w, h, 8, 8);
				this.graphics.endFill();
				
				if(this.filters == null || this.filters.length == 0) {
					var shadow = new flash.filters.DropShadowFilter(
							2, 45, DefaultStyle.DROPSHADOW,
							0.5, 4, 4, 0.5,
							flash.filters.BitmapFilterQuality.HIGH,
							false, false, false );
					this.filters = [shadow];
					}
			]]>
			</script>
		</events>
	</haxegui:controls:ComboBoxBackground>

	<haxegui:controls:ListItem>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, DefaultStyle.BACKGROUND - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
				
				
				var i = this.parent.getChildIndex(this) ;
				var c = ((i+1)%2==0) ? this.color :  this.color - 0x0F0F0F;
				this.graphics.beginFill ( c );
				this.graphics.drawRect (0, 0, this.box.width, 20);
				this.graphics.endFill ();
				
				this.tf.setTextFormat( DefaultStyle.getTextFormat() );
				
				if(i==1)
				{
						var shadow = new flash.filters.DropShadowFilter (2, 90, DefaultStyle.DROPSHADOW, 0.75, 4, 4, 0.5, flash.filters.BitmapFilterQuality.HIGH, true, false, false );
						this.filters = [shadow];
				}
			]]>
			</script>
		</events>
	</haxegui:controls:ListItem>

	<haxegui:controls:StepperUpButton>
		<events>
			<script type="text/hscript" action="mouseOut">
			<![CDATA[
				CursorManager.setCursor(Cursor.ARROW);
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="interval">
			<![CDATA[
				this.parent.value += this.parent.step;
			]]>
			</script>
			<script type="text/hscript" action="mouseUp">
			<![CDATA[
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				this.graphics.beginFill(this.color);
				this.graphics.drawRoundRectComplex(0, 0, 10, 10, 0, 4, 0, 0);
				this.graphics.endFill();
				this.moveTo( this.parent.box.width - 10, -1 );
				var shadow = new flash.filters.DropShadowFilter(
					2, 45, DefaultStyle.DROPSHADOW,
					0.5, 4, 4, 0.5,
					flash.filters.BitmapFilterQuality.HIGH,
					false, false, false );
				this.filters = [shadow];
			]]>
			</script>
			<script type="text/hscript" action="mouseOver">
			<![CDATA[
				if(disabled) return;
				CursorManager.setCursor(Cursor.HAND);
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				if(!this.disabled && this.autoRepeat) {
					this.parent.value += this.parent.step;
					this.startIntervalDelayed(this.repeatsPerSecond, this.repeatWaitTime);
				}
			]]>
			</script>
		</events>
	</haxegui:controls:StepperUpButton>

	<haxegui:controls:Stepper>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.background.graphics.lineStyle (1, this.color - 0x141414, 1, true,
								    flash.display.LineScaleMode.NONE,
								    flash.display.CapsStyle.ROUND,
								    flash.display.JointStyle.ROUND);
				
				this.background.graphics.beginFill (DefaultStyle.INPUT_BACK);
				this.background.graphics.drawRoundRect (0, -1, this.box.width,
									this.box.height, 8, 8);
				this.background.graphics.endFill ();
				
				var shadow =
				  new flash.filters.DropShadowFilter (4, 45, DefaultStyle.DROPSHADOW,
								      0.8, 4, 4, 0.65,
								      flash.filters.BitmapFilterQuality.HIGH,
								      true, false, false);
				this.filters =[shadow];
			]]>
			</script>
		</events>
	</haxegui:controls:Stepper>

	<haxegui:controls:SliderHandle>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				
				
				this.graphics.lineStyle(2, this.color - 0x141414);
				
				var colors = [ this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(15, 20, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				
				
				this.graphics.drawRoundRect(0,0,8,20,4,4);
			]]>
			</script>
		</events>
	</haxegui:controls:SliderHandle>

	<haxegui:controls:ScrollBarUpButton>
		<events>
			<script type="text/hscript" action="interval">
			<![CDATA[
				/*trace(parent.handle.y);*/
				
				var y = parent.handle.y - 50;
				if( y < 20 ) y = 20;
				
				if(parent.handleMotionTween!=null)
					parent.handleMotionTween.stop();
				
				parent.handleMotionTween = new feffects.Tween( parent.handle.y, y, 1500, parent.handle, "y", feffects.easing.Expo.easeOut );
				parent.handleMotionTween.setTweenHandlers( function ( e ) { parent.adjust(); } );
				parent.handleMotionTween.start();
			]]>
			</script>
			<script type="text/hscript" action="mouseUp">
			<![CDATA[
				if(this.disabled) return;
				if(this.hitTestObject( CursorManager.getInstance()._mc )) {
					this.updateColorTween( new feffects.Tween(-50, 50, 150, feffects.easing.Linear.easeNone) );
					CursorManager.setCursor(this.cursorOver);
				}
				else {
					this.updateColorTween( new feffects.Tween(-50, 0, 120, feffects.easing.Linear.easeNone) );
				}
				
				this.stopInterval();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				var colors = [ this.color - 0x141414,  this.color | 0x323232 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(20, 20, Math.PI, 0, 0);
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, this.color - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRect (0, 0, 20, 20 );
				this.graphics.endFill ();
				
				var colors = [ this.color - 0x141414,  this.color - 0x333333 ];
				matrix.createGradientBox(10, 110, Math.PI, 5, 5);
				this.graphics.lineStyle (1, this.color - 0x333333 );
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, [0, 0x66], matrix );
				this.graphics.moveTo( 7.5, 12.5);
				this.graphics.lineTo(  10,  7.5);
				this.graphics.lineTo(12.5, 12.5);
				this.graphics.endFill ();
			]]>
			</script>
			<script type="text/hscript" action="mouseDown">
			<![CDATA[
				this.updateColorTween( new feffects.Tween(50, -50, 350, feffects.easing.Linear.easeOut) );
				CursorManager.setCursor(this.cursorPress);
				
				this.startInterval(10);
			]]>
			</script>
		</events>
	</haxegui:controls:ScrollBarUpButton>

	<haxegui:controls:CloseButton>
		<events>
			<script type="text/hscript" action="mouseClick">
			<![CDATA[
				this.parent.parent.destroy();
			]]>
			</script>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 4);
				this.graphics.lineTo (8, 8);
				this.graphics.moveTo (8, 4);
				this.graphics.lineTo (4, 8);
			]]>
			</script>
		</events>
	</haxegui:controls:CloseButton>

	<haxegui:controls:Slider>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				this.graphics.lineStyle(4, this.color - 0x323232);
				this.graphics.moveTo(0, this.box.height/2);
				this.graphics.lineTo(this.box.width, this.box.height/2);
				
				this.graphics.lineStyle(1, this.color - 0x323232);
				var s = this.box.width/20;
				for(i in 1...20)
				{
				this.graphics.moveTo(i*s, 4);
				this.graphics.lineTo(i*s, this.box.height-4);
				}
				
				this.graphics.lineStyle(0,0,0);
				this.graphics.beginFill(0,0);
				this.graphics.drawRect(0,0,this.box.width,this.box.height);
				this.graphics.endFill();
			]]>
			</script>
		</events>
	</haxegui:controls:Slider>

	<haxegui:controls:ScrollBar>
		<events>
		</events>
	</haxegui:controls:ScrollBar>

	<haxegui:controls:ComboBoxDropButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				var h = this.parent.box.height;
				var w = h;
				this.graphics.clear();
				var colors = [ this.color | 0x323232, this.color - 0x141414 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				/*
				this.graphics.lineStyle (1,
					Math.max(0, Math.min(0xFFFFFF, DefaultStyle.BACKGROUND - 0x282828)),
					1, true,
					flash.display.LineScaleMode.NONE,
					flash.display.CapsStyle.ROUND,
					flash.display.JointStyle.ROUND
					);
					* */
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
				this.graphics.drawRoundRectComplex(0, 1, w, h-1, 0, 4, 0, 4 );
				this.graphics.endFill ();
				
				this.graphics.lineStyle (1, this.color - 0x333333 );
				colors = [ this.color - 0x141414,  this.color - 0x333333 ];
				matrix.createGradientBox(w/2, h/2, Math.PI/2, 7.5, 7.5);
				this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, [0, 0x66], matrix );
				this.graphics.moveTo(7.5,7.5);
				this.graphics.lineTo(w-7.5, 7.5);
				this.graphics.lineTo(w/2, h-7.5);
				this.graphics.endFill ();
				/*
				if(this.filters == null || this.filters.length == 0) {
					var shadow = new flash.filters.DropShadowFilter(
							2, 45, DefaultStyle.DROPSHADOW,
							0.5, 4, 4, 0.5,
							flash.filters.BitmapFilterQuality.HIGH,
							false, false, false );
					this.filters = [shadow];
				}
				* */
				this.x = this.parent.box.width - w;
				this.y = 0;
			]]>
			</script>
		</events>
	</haxegui:controls:ComboBoxDropButton>

	<haxegui:controls:TitleBar>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				var grad = flash.display.GradientType.LINEAR;
				var colors = [ color | 0x323232, color - 0x141414 ];
				var alphas = [ 100, 0 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				matrix.createGradientBox(width, 32, Math.PI/2, 0, 0);
				this.graphics.beginGradientFill( grad, colors, alphas, ratios, matrix );
				this.graphics.drawRoundRectComplex (0, 0, width, 32, 4, 4, 0, 0);
				this.graphics.drawRect (10, 20, width - 20, 12);
				this.graphics.endFill ();
			]]>
			</script>
		</events>
	</haxegui:controls:TitleBar>

	<haxegui:controls:MaximizeButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 6);
				this.graphics.lineTo (8, 6);
				this.graphics.moveTo (6, 4);
				this.graphics.lineTo (6, 8);
			]]>
			</script>
		</events>
	</haxegui:controls:MaximizeButton>

	<haxegui:controls:MinimizeButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear ();
				var grad = flash.display.GradientType.LINEAR;
				var colors =[this.color | 0x323232, this.color - 0x141414];
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (12, 12, Math.PI / 2, 0, 0);
				this.graphics.lineStyle (1,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)), 2, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				this.graphics.beginGradientFill (grad, colors, alphas, ratios, matrix);
				this.graphics.drawRoundRect (0, 0, 12, 12, 4, 4);
				this.graphics.endFill ();
				this.graphics.lineStyle (2,
							 Math.max (0,
								   Math.min (0xFFFFFF,
									     this.color - 0x282828)));
				this.graphics.moveTo (4, 6);
				this.graphics.lineTo (8, 6);
			]]>
			</script>
		</events>
	</haxegui:controls:MinimizeButton>

	<haxegui:controls:RadioButton>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				var colors = [ color | 0x323232, color - 0x141414 ];
				var alphas = [ 100, 100 ];
				var ratios = [ 0, 0xFF ];
				var matrix = new flash.geom.Matrix();
				
				if(this.selected)
				{
					matrix.createGradientBox(20, 20, 0, 0, 0);
					ratios = [ 0x66, 0xFF ];
					colors = [ color - 0x333333, color ];
				
					this.graphics.lineStyle (1, this.color - 0x141414, 1, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
					this.graphics.beginGradientFill( flash.display.GradientType.RADIAL, colors, alphas, ratios, matrix );
					this.graphics.drawCircle (10, 10, 8);
					this.graphics.endFill ();
				
					/*
					 * matrix.createGradientBox(10, 10, -Math.PI/2, 5, 5);
					colors = [ color - 0x141414, 0x000000 ];
					this.graphics.beginGradientFill( flash.display.GradientType.RADIAL, colors, alphas, ratios, matrix );
					*/
					this.graphics.lineStyle(0,0,0);
					this.graphics.beginFill(0);
					this.graphics.drawCircle (10, 10, 4);
					this.graphics.endFill ();
				
					var shadow = new flash.filters.DropShadowFilter (2, 45, DefaultStyle.DROPSHADOW, 0.8, 4, 4, 0.65, flash.filters.BitmapFilterQuality.HIGH, false, false, false );
					this.filters = [shadow];
				
				}
				else
				{
					matrix.createGradientBox(this.box.width, this.box.height, Math.PI/2, 0, 0);
				
					this.graphics.lineStyle(1);
					this.graphics.lineGradientStyle (flash.display.GradientType.LINEAR, [ color, color - 0x202020 ], alphas, ratios, matrix);
					this.graphics.beginGradientFill( flash.display.GradientType.LINEAR, colors, alphas, ratios, matrix );
					this.graphics.drawCircle (10, 10, 8);
					this.graphics.endFill ();
				
				
					var shadow = new flash.filters.DropShadowFilter (4, 45, DefaultStyle.DROPSHADOW, 0.8, 4, 4, 0.65, flash.filters.BitmapFilterQuality.HIGH, true, false, false );
					this.filters = [shadow];
				
				}
			]]>
			</script>
		</events>
	</haxegui:controls:RadioButton>

	<haxegui:Tab>
		<events>
			<script type="text/hscript" action="redraw">
			<![CDATA[
				this.graphics.clear();
				
				
				var colors = [this.color, this.color - 0x141414 ] ;
				
				if(this.active)
					colors = [this.color | 0x202020, this.color ] ;
				
				var alphas =[100, 100];
				var ratios =[0, 0xFF];
				var matrix = new flash.geom.Matrix ();
				matrix.createGradientBox (this.box.width, this.box.height, Math.PI / 2, 0, 0);
				
				
				this.graphics.lineStyle (1, this.color - 0x202020, 1, true,
							 flash.display.LineScaleMode.NONE,
							 flash.display.CapsStyle.ROUND,
							 flash.display.JointStyle.ROUND);
				
				this.graphics.beginGradientFill (flash.display.GradientType.LINEAR, colors,
								 alphas, ratios, matrix);
				
				this.graphics.drawRoundRectComplex( 0, 0, this.box.width, this.box.height, 8, 8, 0, 0 );
				this.graphics.endFill();
				
				/*
				if (this.filters.length == 0)
				  {
				    var shadow =
				      new flash.filters.DropShadowFilter (this.disabled ? 2 : 4, 45,
									  DefaultStyle.DROPSHADOW,
									  this.disabled ? 0.2 : 0.5,
									  4, 4, 0.5,
									  flash.filters.BitmapFilterQuality.
									  HIGH,
									  false, false, false);
				    this.filters =[shadow];
				  }
				*/
				
				
				if (this.label != null)
				  {
				    this.label.moveTo (Math.floor (.5 * (this.box.width - this.label.width)),
						       Math.floor (.5 *
								   (this.box.height - this.label.height)));
				  }
			]]>
			</script>
		</events>
	</haxegui:Tab>
</haxegui:Style>

